name: Build .deb (multi-arch Debian using repo script)

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

permissions:
  contents: write

jobs:
  build:
    name: Build .deb for ${{ matrix.arch }} on Debian ${{ matrix.distro }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: arm64
            platform: linux/arm64
            distro: bullseye
          - arch: arm64
            platform: linux/arm64
            distro: bookworm
          - arch: arm64
            platform: linux/arm64
            distro: trixie
          - arch: armhf
            platform: linux/arm/v7
            distro: bullseye
            continue-on-error: true
          - arch: armhf
            platform: linux/arm/v7
            distro: bookworm
            continue-on-error: true
          - arch: armhf
            platform: linux/arm/v7
            distro: trixie
            continue-on-error: true

    env:
      PKGNAME: spyglass

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU (for running foreign-arch containers)
        uses: docker/setup-qemu-action@v2

      - name: Build inside Debian container (use repo's build_deb.sh)
        id: build_in_container
        run: |
          WORKDIR="$(pwd)"
          DISTRO="${{ matrix.distro }}"
          PLATFORM="${{ matrix.platform }}"
          ARCH="${{ matrix.arch }}"

          echo "Packaging ${PKGNAME} version=${VERSION} arch=${ARCH} distro=${DISTRO} platform=${PLATFORM}"
          echo "External repository: ${EXTERNAL_REPO}"

          # Ensure build script is executable in repo
          chmod +x ./build_deb.sh

          # Run Debian container (emulated if needed) and call the repository script.
          # Pass EXTERNAL_REPO as environment variable so the script can install it into the venv.
          docker run --rm --platform="${PLATFORM}" -v "${WORKDIR}:/work" -w /work \
            "debian:${DISTRO}-slim" \
            bash -eux -o pipefail -c "
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              apt-get install -y --no-install-recommends \
                git \
                python3 \
                python3-venv \
                python3-pip \
                python3-av \
                binutils \
                ruby-full \
                curl \
                wget

              # Install fpm (for Debian packaging)
              gem install --no-document fpm

              # Run the repository's build script, give it the version argument and EXTERNAL_REPO via env.
              # The script in the repo has been adapted to look for EXTERNAL_REPO env var and install it into the venv.
              ./build_deb.sh '${DISTRO}'
              mv *.deb 'pool/${DISTRO}/rpi'
              cd 'pool/${DISTRO}/rpi'
            "

      - name: Commit deb file
        run: |
          git config --global user.name "Patrick Gehrsitz"
          git config --global user.email "mryel00.github@gmail.com"
          git config pull.rebase true
          DEB=$(ls -t *.whl | head -n 1)
          VERSION="$(echo "$DEB" | awk -F'-' '{print $2}')"
          git add *.deb
          git commit -m "Update Spyglass ${VERSION}"
          git pull
          git push
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
    - name: Download Release Body
      uses: actions/download-artifact@v4
      with:
        name: release-body.md
        path: .

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_body.md
        tag_name: ${{ needs.push_to_main.outputs.version }}
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
